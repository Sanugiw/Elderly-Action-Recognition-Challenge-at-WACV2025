# -*- coding: utf-8 -*-
"""Preprocessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U8LsAx8FXbExNAx9_mcRNgj8dImdV-JG
"""

!pip install opencv-python tqdm numpy pandas

import cv2
import os
import numpy as np
import pandas as pd
from tqdm import tqdm

def is_static_video(cap, num_samples=10, motion_threshold=2.0):
    """
    Checks if a video is mostly static (low motion).
    """
    frame_count = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
    if frame_count < num_samples:
        return True

    indices = np.linspace(0, frame_count - 1, num_samples).astype(int)
    prev_gray = None
    diffs = []

    for idx in indices:
        cap.set(cv2.CAP_PROP_POS_FRAMES, idx)
        ret, frame = cap.read()
        if not ret:
            continue
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        if prev_gray is not None:
            diff = cv2.absdiff(gray, prev_gray)
            diffs.append(np.mean(diff))
        prev_gray = gray

    avg_diff = np.mean(diffs) if diffs else 0
    return avg_diff < motion_threshold

from google.colab import drive
drive.flush_and_unmount()  # unmount if mounted before
drive.mount('/content/drive')

# Path to the uploaded folder in Google Drive
data_path = '/content/drive/MyDrive/Elderly-Action-Recognition-Challenge-at-WACV2025/data/subset_videos'

import os

# Make sure the folder exists
if os.path.exists(data_path):
    print("✅ Dataset folder found!")
    print("Subfolders:", os.listdir(data_path))
else:
    print("❌ Folder not found! Check your Google Drive path.")

def filter_videos(input_root, output_root, min_duration=2, max_duration=30, min_res=224, save_metadata=True):
    """
    Filters and saves only high-quality videos into output_root, preserving folder structure.
    """
    os.makedirs(output_root, exist_ok=True)
    metadata = []

    for subdir, _, files in os.walk(input_root):
        for file in files:
            if not file.lower().endswith(".mp4"):
                continue

            input_path = os.path.join(subdir, file)
            rel_path = os.path.relpath(subdir, input_root)
            output_dir = os.path.join(output_root, rel_path)
            os.makedirs(output_dir, exist_ok=True)
            output_path = os.path.join(output_dir, file)

            cap = cv2.VideoCapture(input_path)
            if not cap.isOpened():
                print(f"[WARN] Cannot open video: {input_path}")
                continue

            fps = cap.get(cv2.CAP_PROP_FPS)
            frame_count = cap.get(cv2.CAP_PROP_FRAME_COUNT)
            width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
            height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

            if fps == 0 or frame_count == 0:
                print(f"[WARN] Invalid FPS/frame count: {input_path}")
                continue

            duration = frame_count / fps
            if duration < min_duration or duration > max_duration:
                print(f"[SKIP] Duration {duration:.2f}s out of range: {file}")
                continue
            if width < min_res or height < min_res:
                print(f"[SKIP] Low resolution ({width}x{height}): {file}")
                continue

            static = is_static_video(cap)
            if static:
                print(f"[SKIP] Low motion detected: {file}")
                continue

            cap.set(cv2.CAP_PROP_POS_FRAMES, 0)

            fourcc = cv2.VideoWriter_fourcc(*"mp4v")
            out = cv2.VideoWriter(output_path, fourcc, fps, (224, 224))

            for _ in tqdm(range(int(frame_count)), desc=f"Filtering {file}", leave=False):
                ret, frame = cap.read()
                if not ret:
                    break
                frame = cv2.resize(frame, (224, 224))
                frame = cv2.fastNlMeansDenoisingColored(frame, None, 3, 3, 7, 21)
                out.write(frame)

            cap.release()
            out.release()
            print(f"[SAVED] {output_path}")

            # Save metadata
            metadata.append({
                "file": file,
                "duration": duration,
                "width": width,
                "height": height,
                "fps": fps,
                "motion_static": static,
                "saved_path": output_path
            })

    if save_metadata and metadata:
        df = pd.DataFrame(metadata)
        df.to_csv(os.path.join(output_root, "filtered_metadata.csv"), index=False)
        print(f"\n✅ Metadata saved to {os.path.join(output_root, 'filtered_metadata.csv')}")

output_path = '/content/drive/MyDrive/Elderly-Action-Recognition-Challenge-at-WACV2025/data/processed_data'
filter_videos(data_path, output_path)

import pandas as pd

output_path = '/content/drive/MyDrive/Elderly-Action-Recognition-Challenge-at-WACV2025/data/processed_data'
df = pd.read_csv(f"{output_path}/filtered_metadata.csv")
print(df.head())
print(f"Total filtered videos: {len(df)}")
